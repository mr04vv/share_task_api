buildscript {
	ext {
		kotlinVersion = '1.1.61'
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'kotlin-kapt'
apply plugin: 'java'

group = ''
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
	kotlinOptions {
		languageVersion = "1.2"
	}
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
	maven {
		 url('https://dl.bintray.com/kotlin/exposed/')
 }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-web-services')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	compile 'org.jetbrains.exposed:exposed:0.7.6'
	compile 'mysql:mysql-connector-java:5.1.6'
	compile 'com.google.cloud.sql:mysql-socket-factory:1.0.2'
	compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
	runtime group: 'org.jetbrains.exposed', name: 'exposed', version: '0.8.5'
	compile group: 'org.jetbrains.exposed', name: 'spring-transaction', version: '0.8.5'
	compile 'com.sparkjava:spark-core:2.6.0'
	compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.8.8'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.8.8.1'
	runtime "org.jetbrains.kotlin:kotlin-reflect:0.13.1513"
	compile "com.google.code.gson:gson:2.8.0"
	compile group: 'com.google.cloud.tools', name: 'appengine-gradle-plugin', version: '1.3.5'

	task stage(type: Copy, dependsOn: [clean, build]) {
    from jar.archivePath
    into project.rootDir 
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}
}
